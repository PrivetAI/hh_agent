-- Миграция для добавления таблиц псевдонимизации
-- Дата: 2025-07-15

-- Убеждаемся, что расширение uuid-ossp включено
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Создаем схему pseudonymization
CREATE SCHEMA IF NOT EXISTS pseudonymization;

-- Таблица маппинга для каждой сессии генерации
CREATE TABLE IF NOT EXISTS pseudonymization.mapping_sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id),
    created_at TIMESTAMP DEFAULT NOW(),
    expires_at TIMESTAMP DEFAULT NOW() + INTERVAL '7 days'
);

-- Таблица маппинга значений
CREATE TABLE IF NOT EXISTS pseudonymization.mappings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES pseudonymization.mapping_sessions(id) ON DELETE CASCADE,
    original_value TEXT NOT NULL,
    pseudonym TEXT NOT NULL,
    data_type VARCHAR(50) NOT NULL, -- 'name', 'email', 'phone', 'company', etc
    created_at TIMESTAMP DEFAULT NOW()
);

-- Индексы для быстрого поиска
CREATE INDEX IF NOT EXISTS idx_mappings_session ON pseudonymization.mappings(session_id);
CREATE INDEX IF NOT EXISTS idx_mappings_pseudonym ON pseudonymization.mappings(session_id, pseudonym);

-- Индекс для очистки истекших сессий
CREATE INDEX IF NOT EXISTS idx_mapping_sessions_expires ON pseudonymization.mapping_sessions(expires_at);

-- Добавляем комментарии для документации
COMMENT ON SCHEMA pseudonymization IS 'Schema for storing pseudonymization mappings';
COMMENT ON TABLE pseudonymization.mapping_sessions IS 'Sessions for grouping pseudonymization mappings';
COMMENT ON TABLE pseudonymization.mappings IS 'Mappings between original values and pseudonyms';
COMMENT ON COLUMN pseudonymization.mappings.data_type IS 'Type of data: name, email, phone, company, etc.';

-- Функция для автоматической очистки истекших сессий (опционально)
CREATE OR REPLACE FUNCTION pseudonymization.cleanup_expired_sessions()
RETURNS INTEGER
LANGUAGE plpgsql
AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM pseudonymization.mapping_sessions 
    WHERE expires_at < NOW();
    
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RETURN deleted_count;
END;
$$;

COMMENT ON FUNCTION pseudonymization.cleanup_expired_sessions() IS 'Removes expired mapping sessions and their associated mappings';

-- Создаем задачу для периодической очистки (если используется pg_cron)
-- SELECT cron.schedule('cleanup-pseudonymization', '0 2 * * *', 'SELECT pseudonymization.cleanup_expired_sessions();');